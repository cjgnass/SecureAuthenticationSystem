version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: login-backend
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4000
      - SERVER_URL=http://localhost:4000
      - CLIENT_URL=http://localhost:5173
      - ACCESS_SECRET=dev-access-secret-change-me
      - REFRESH_SECRET=dev-refresh-secret-change-me
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/app_db
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped
  
  postgres:
    image: postgres:16
    container_name: login-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password 
      - POSTGRES_DB=app_db
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/00_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: login-frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:4000
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
